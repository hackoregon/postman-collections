{
	"info": {
		"_postman_id": "acdcbd10-19c4-4ffa-a289-bb1aa14bdcee",
		"name": "Hack Oregon Sandbox 2019 API",
		"description": "Backend API for Civic Sandbox",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "sandbox",
			"item": [
				{
					"name": "setup",
					"item": [
						{
							"name": "Setup",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5075f62b-ca1a-484a-9f3e-b1673128e029",
										"exec": [
											"pm.environment.set(\"passed\", 0);",
											"pm.environment.set(\"failed\", 0);",
											"",
											"pm.environment.set(\"failedTests\", JSON.stringify([]));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									],
									"query": [
										{
											"key": "foo1",
											"value": "bar1"
										},
										{
											"key": "foo2",
											"value": "bar2"
										}
									]
								},
								"description": "A setup step"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "api",
					"item": [
						{
							"name": "Color Areas",
							"item": [
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fa367b0-3336-4e35-9017-fc030247d5cd",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a0fe7f11-7991-42b8-ba3d-f251881cfc80",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/ColorAreas/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"ColorAreas",
												""
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/ColorAreas/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"ColorAreas",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "223851f3-f960-4dfc-aaf1-f5f5dd5d7c3c",
												"exec": [
													"if (pm.environment.get(\"id\") === null) {",
													"    pm.environment.set(\"id\", 99999999);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4de6c09e-8530-4bc3-93de-d2d5ed74e1bd",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"if (pm.environment.get(\"id\") === 99999999) {",
													"    testName = pm.info.requestName + \" - Status code is 404\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(404);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"} else {",
													"    testName = pm.info.requestName + \" - Status code is 200\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(200);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"    ",
													"    ",
													"    var jsonData = pm.response.json();",
													"   ",
													"    testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"    pm.test(testName, function () {",
													"        pm.expect(jsonData).to.have.all.keys('id');",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/ColorAreas/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"ColorAreas",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this color area."
												}
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/ColorAreas/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"ColorAreas",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3714d32a-b5bc-4dee-b7d5-f04e94cac4c8",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Color Areas\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a21e9bba-8e32-4727-9a67-549c850ecc7c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Community Gardens V20190122",
							"item": [
								{
									"name": "API endpoint that allows CommunityGardensV201901esttag to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be842c6d-4302-4cf3-bc47-cfd3c62eb313",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
													"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
													"    pm.expect(jsonData.results.features).to.be.an('array');",
													"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"    pm.environment.set(\"ogc_fid\", jsonData.results.features[0][\"id\"]);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c6c8d2d3-a6dd-42bc-b10b-84cf17a0645f",
												"exec": [
													"pm.environment.set(\"limit\", 2);",
													"pm.environment.set(\"offset\", 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/CommunityGardensV20190122/?limit={{limit}}&offset={{offset}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"CommunityGardensV20190122",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows CommunityGardensV201901esttag to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/CommunityGardensV20190122/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"CommunityGardensV20190122",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows CommunityGardensV201901esttag to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6e9a613c-62fd-4dca-8bce-54ba8e0195f5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "059d110e-3ad5-4f82-9d93-99aa3600a47f",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/CommunityGardensV20190122/:ogc_fid/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"CommunityGardensV20190122",
												":ogc_fid",
												""
											],
											"variable": [
												{
													"key": "ogc_fid",
													"value": "{{ogc_fid}}",
													"description": "A unique integer value identifying this community gardens v20190122."
												}
											]
										},
										"description": "API endpoint that allows CommunityGardensV201901esttag to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/CommunityGardensV20190122/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"CommunityGardensV20190122",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "941f6b8e-299b-47a8-8334-de72f53207ad",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Community Gardens V20190122\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "39d681f1-021d-4d81-b9ce-515563c0c389",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Dataset045Dcs",
							"item": [
								{
									"name": "API endpoint that allows CommunityGardensV2019012 to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a2ccb76-3c3e-4844-a55b-ad7d5ff9544d",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
													"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
													"    pm.expect(jsonData.results.features).to.be.an('array');",
													"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"    pm.environment.set(\"ogc_fid\", jsonData.results.features[0][\"id\"]);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Dataset045Dcs/?limit=<integer>&offset=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Dataset045Dcs",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "<integer>",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "<integer>",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows CommunityGardensV2019012 to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Dataset045Dcs/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Dataset045Dcs",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows CommunityGardensV2019012 to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68a50afb-f591-4ee8-8aa7-055f7cdee1ee",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Dataset045Dcs/:ogc_fid/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Dataset045Dcs",
												":ogc_fid",
												""
											],
											"variable": [
												{
													"key": "ogc_fid",
													"value": "{{ogc_fid}}",
													"description": "A unique integer value identifying this dataset045 dc."
												}
											]
										},
										"description": "API endpoint that allows CommunityGardensV2019012 to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Dataset045Dcs/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Dataset045Dcs",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3eab2d5-7a18-4ade-956e-fd7944407b5e",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Dataset045Dcs\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "62be4e8e-8d34-4167-a93d-edc83cbbec5c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Dataset045Pdxs",
							"item": [
								{
									"name": "API endpoint that allows CommunityGardensV2019012 to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e37b73b1-5c16-40e5-82f6-cd5951527d2b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "094d2b09-c375-48b3-98c8-16b0238fdaca",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
													"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
													"    pm.expect(jsonData.results.features).to.be.an('array');",
													"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"    pm.environment.set(\"ogc_fid\", jsonData.results.features[0][\"id\"]);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Dataset045Pdxs/?offset={{offset}}&limit={{limit}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Dataset045Pdxs",
												""
											],
											"query": [
												{
													"key": "offset",
													"value": "{{offset}}",
													"description": "The initial index from which to return the results."
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												}
											]
										},
										"description": "API endpoint that allows CommunityGardensV2019012 to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Dataset045Pdxs/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Dataset045Pdxs",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows CommunityGardensV2019012 to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e97abbf5-935d-4233-9a2a-5b48a47da554",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cd309794-46f9-4e8c-8bb2-5cf704420626",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Dataset045Pdxs/:ogc_fid/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Dataset045Pdxs",
												":ogc_fid",
												""
											],
											"variable": [
												{
													"key": "ogc_fid",
													"value": "{{ogc_fid}}",
													"description": "A unique integer value identifying this dataset045 pdx."
												}
											]
										},
										"description": "API endpoint that allows CommunityGardensV2019012 to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Dataset045Pdxs/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Dataset045Pdxs",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "083ef3a2-cbc6-48cc-9ceb-51573947a66b",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Dataset045Pdxs\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "94dbae12-6b04-4b5b-a5b4-064afdd8d42c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Dates",
							"item": [
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f0c7ae9-ad29-4cd5-8506-e98aeb5ae22a",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    Object.keys(jsonData.results[0]).forEach(function(key) {",
													"        pm.environment.set(key, jsonData.results[0][key]);",
													"    });",
													"    var splitURL =jsonData.results[jsonData.results.length-1][\"url\"].split('/');",
													"    pm.environment.set(\"id\", splitURL[splitURL.length-2]);",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bc9d2d6f-ecbe-4a74-ba74-b23f3e36d23d",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Dates/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Dates",
												""
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Dates/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Dates",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba6b0f61-3bbc-4f95-ad4b-418307dc68bd",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.all.keys('url', 'field_name', 'granularity','default_filter','min','max');",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Dates/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Dates",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this dates."
												}
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Dates/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Dates",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7dcbe771-23fa-41ca-ab75-10142a70924e",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Dates\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96dda3c2-2341-4fb6-a18a-6d98d908a2a7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Icon Mappings",
							"item": [
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "565a792e-cc2c-4543-840c-79a8556cb694",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e5094cff-ec77-4e17-83db-8d5494fb90dc",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/IconMappings/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"IconMappings",
												""
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/IconMappings/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"IconMappings",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9546b273-1027-4a2b-b633-295866313e0e",
												"exec": [
													"if (pm.environment.get(\"id\") === null) {",
													"    pm.environment.set(\"id\", 99999999);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d1946f7d-41d5-4a98-8690-578585d64e22",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"if (pm.environment.get(\"id\") === 99999999) {",
													"    testName = pm.info.requestName + \" - Status code is 404\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(404);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"} else {",
													"    testName = pm.info.requestName + \" - Status code is 200\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(200);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"    ",
													"    ",
													"    var jsonData = pm.response.json();",
													"   ",
													"    testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"    pm.test(testName, function () {",
													"        pm.expect(jsonData).to.have.all.keys('id');",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/IconMappings/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"IconMappings",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this icon mapping."
												}
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/IconMappings/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"IconMappings",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "51eb0c5b-485d-4042-93db-05d15447544b",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Icon Mappings\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "43f1f60e-bfb2-4016-80f8-ab9987dffe7f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Layers",
							"item": [
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "999dc382-4a52-4982-a3d6-2931675f9f99",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ae16f9c-2282-4739-8ef4-7116bc196da6",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    Object.keys(jsonData.results[0]).forEach(function(key) {",
													"        pm.environment.set(key, jsonData.results[0][key]);",
													"    });",
													"    var splitURL =jsonData.results[jsonData.results.length-1][\"url\"].split('/');",
													"    pm.environment.set(\"id\", splitURL[splitURL.length-2]);",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Layers/?limit=<integer>&offset=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Layers",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "<integer>",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "<integer>",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Layers/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Layers",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d180ba0-17f9-49c2-af25-b9cb611e53c5",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.all.keys('url', 'created', 'modified','name','data_endpoint','metadata_endpoint', 'rating','creator','aggregation','visualization','tags');",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Layers/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Layers",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this layer."
												}
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Layers/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Layers",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2ead0c3-6e33-4d7d-a413-85c7487c3756",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Layers\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "659a49d3-0ad5-4983-acd8-c22cbc8061f3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Maps",
							"item": [
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "36faf9bf-5fe1-4828-993f-ba8ff994f497",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "040a111b-4e8c-4182-b3f5-80a98b053a39",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Maps/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Maps",
												""
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Maps/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Maps",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cae58cf4-70c8-4c1e-817a-6dbffcc0d933",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"if (pm.environment.get(\"id\") === 99999999) {",
													"    testName = pm.info.requestName + \" - Status code is 404\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(404);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"} else {",
													"    testName = pm.info.requestName + \" - Status code is 200\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(200);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"    ",
													"    ",
													"    var jsonData = pm.response.json();",
													"   ",
													"    testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"    pm.test(testName, function () {",
													"        pm.expect(jsonData).to.have.all.keys('id');",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "edb328f6-08c2-41af-8e63-81626090c12f",
												"exec": [
													"if (pm.environment.get(\"id\") === null) {",
													"    pm.environment.set(\"id\", 99999999);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Maps/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Maps",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this map."
												}
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Maps/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Maps",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "999a6ce4-76f8-4e07-9588-7ab135206ccf",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Maps\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0ee79c3c-7413-4402-8491-e3b7ab3814a2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Packages",
							"item": [
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c2498d83-4ded-4864-b654-369af877ab9e",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b1a375ce-1eb5-42f6-b66a-3515e8fb8c65",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    Object.keys(jsonData.results[0]).forEach(function(key) {",
													"        pm.environment.set(key, jsonData.results[0][key]);",
													"    });",
													"    var splitURL =jsonData.results[jsonData.results.length-1][\"url\"].split('/');",
													"    pm.environment.set(\"id\", splitURL[splitURL.length-2]);",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Packages/?limit={{limit}}&offset={{offset}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Packages",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Packages/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Packages",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "134c669d-b9d0-43b1-a944-fa049082aed4",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('url','name','metadata_endpoint','created','modified','contributor','curation','affiliation','layers','tags')",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Packages/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Packages",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this package."
												}
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Packages/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Packages",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "655e99cb-2f2f-471e-a001-865db8588911",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Packages\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c1773ff-3c03-44a1-bbd3-d4a549462907",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Parks V20190129",
							"item": [
								{
									"name": "API endpoint that allows ParksV20190129 to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e03f5d08-2d86-439c-8faf-74e8830a7937",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
													"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
													"    pm.expect(jsonData.results.features).to.be.an('array');",
													"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"    pm.environment.set(\"ogc_fid\", jsonData.results.features[0][\"id\"]);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/ParksV20190129/?limit={{limit}}&offset={{offset}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"ParksV20190129",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows ParksV20190129 to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/ParksV20190129/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"ParksV20190129",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows ParksV20190129 to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc9d69c1-d0a9-4d85-aaf5-c64db1c78335",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/ParksV20190129/:ogc_fid/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"ParksV20190129",
												":ogc_fid",
												""
											],
											"variable": [
												{
													"key": "ogc_fid",
													"value": "{{ogc_fid}}",
													"description": "A unique integer value identifying this parks v20190129."
												}
											]
										},
										"description": "API endpoint that allows ParksV20190129 to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/ParksV20190129/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"ParksV20190129",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e5db4ea-c8c4-4522-8a18-b37e2254ddda",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Parks V20190129\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "64e70c96-c397-40b9-8264-ef212c3fb246",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pdx Msa2010Census Block Groups",
							"item": [
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1f1369a-bdef-47c8-84c7-1902a6ef99ce",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
													"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
													"    pm.expect(jsonData.results.features).to.be.an('array');",
													"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"    pm.environment.set(\"ogc_fid\", jsonData.results.features[0][\"id\"]);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/PdxMsa2010CensusBlockGroups/?limit={{limit}}&offset={{offset}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"PdxMsa2010CensusBlockGroups",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/PdxMsa2010CensusBlockGroups/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"PdxMsa2010CensusBlockGroups",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e404782b-85f1-48a9-8e17-a03814ecfd1b",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/PdxMsa2010CensusBlockGroups/:ogc_fid/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"PdxMsa2010CensusBlockGroups",
												":ogc_fid",
												""
											],
											"variable": [
												{
													"key": "ogc_fid",
													"value": "{{ogc_fid}}",
													"description": "A unique integer value identifying this pdx msa2010 census block groups."
												}
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/PdxMsa2010CensusBlockGroups/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"PdxMsa2010CensusBlockGroups",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83ab902e-d255-4f8d-9af5-9a0ead2d2d98",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Pdx Msa2010Census Block Groups\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c941bb18-c8ef-4048-a2d8-8d5a6ca8d5ac",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pdx Msa2010Census Tracts",
							"item": [
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0ae01d7-7e4f-401a-9394-dd4a9e4e9864",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
													"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
													"    pm.expect(jsonData.results.features).to.be.an('array');",
													"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"    pm.environment.set(\"ogc_fid\", jsonData.results.features[0][\"id\"]);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/PdxMsa2010CensusTracts/?limit={{limit}}&offset={{offset}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"PdxMsa2010CensusTracts",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/PdxMsa2010CensusTracts/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"PdxMsa2010CensusTracts",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce02ac55-334d-420c-8135-5f70febb2211",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/PdxMsa2010CensusTracts/:ogc_fid/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"PdxMsa2010CensusTracts",
												":ogc_fid",
												""
											],
											"variable": [
												{
													"key": "ogc_fid",
													"value": "{{ogc_fid}}",
													"description": "A unique integer value identifying this pdx msa2010 census tracts."
												}
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/PdxMsa2010CensusTracts/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"PdxMsa2010CensusTracts",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "10cae855-d053-4a95-8ac0-3f0b2c35d66a",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Pdx Msa2010Census Tracts\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0d51d834-c203-4237-bc38-4433218b05eb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pdx Msa Ncdbs",
							"item": [
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3748efa2-6753-4603-a455-0f76c1d211ce",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
													"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
													"    pm.expect(jsonData.results.features).to.be.an('array');",
													"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"    pm.environment.set(\"ogc_fid\", jsonData.results.features[0][\"id\"]);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/PdxMsaNcdbs/?limit={{limit}}&offset={{offset}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"PdxMsaNcdbs",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/PdxMsaNcdbs/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"PdxMsaNcdbs",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Package to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2b604be-18f8-40c2-9cff-179e0070b971",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/PdxMsaNcdbs/:ogc_fid/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"PdxMsaNcdbs",
												":ogc_fid",
												""
											],
											"variable": [
												{
													"key": "ogc_fid",
													"value": "{{ogc_fid}}",
													"description": "A unique integer value identifying this pdx msa ncdb."
												}
											]
										},
										"description": "API endpoint that allows Package to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/PdxMsaNcdbs/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"PdxMsaNcdbs",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bb00d59e-fa99-4443-b3bd-df4bf67125b5",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Pdx Msa Ncdbs\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "abc990ea-2191-4a10-8b3c-487e976b3ed0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tags",
							"item": [
								{
									"name": "API endpoint that allows Tag to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fb8116d2-27e4-49e7-8242-8dc3510183c3",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "43808bde-9d9d-4823-9f22-df2984ed3d98",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    Object.keys(jsonData.results[0]).forEach(function(key) {",
													"        pm.environment.set(key, jsonData.results[0][key]);",
													"    });",
													"    var splitURL =jsonData.results[jsonData.results.length-1][\"url\"].split('/');",
													"    pm.environment.set(\"id\", splitURL[splitURL.length-2]);",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Tags/?limit={{limit}}&offset={{offset}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Tags",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows Tag to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Tags/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Tags",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Tag to be viewed or listed.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34886464-6627-4ca4-b702-4093f443787e",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.all.keys('url','name','value');",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Tags/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Tags",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this tag."
												}
											]
										},
										"description": "API endpoint that allows Tag to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Tags/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Tags",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3945fe04-b756-47f2-b7d4-2f74b23aff50",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Tags\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "efbb6e5d-1cd7-487a-850a-3c12041a2ca4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Visualization Entity Objects",
							"item": [
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6617314e-edde-4f1b-8d48-a06b7da35e37",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "456ef3d9-01c5-40f3-9b13-a5df74b16836",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/VisualizationEntityObjects/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"VisualizationEntityObjects",
												""
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/VisualizationEntityObjects/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"VisualizationEntityObjects",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5eb74cfc-98a6-4dc1-94cd-3da37348e1fd",
												"exec": [
													"if (pm.environment.get(\"id\") === null) {",
													"    pm.environment.set(\"id\", 99999999);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "563a889e-3b0f-4abb-b1d1-170e0400c2db",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"if (pm.environment.get(\"id\") === 99999999) {",
													"    testName = pm.info.requestName + \" - Status code is 404\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(404);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"} else {",
													"    testName = pm.info.requestName + \" - Status code is 200\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(200);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"    ",
													"    ",
													"    var jsonData = pm.response.json();",
													"   ",
													"    testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"    pm.test(testName, function () {",
													"        pm.expect(jsonData).to.have.all.keys('id');",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/VisualizationEntityObjects/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"VisualizationEntityObjects",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this visualization entity object."
												}
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/VisualizationEntityObjects/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"VisualizationEntityObjects",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "95a0556f-80bf-4692-b17c-7f02771a9ea7",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Visualization Entity Objects\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "26f2d605-dbc4-46ae-a06b-9e33309ec073",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Visualization Entitys",
							"item": [
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "72097be5-4e6c-4cc9-91c2-043d38832fbb",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095b8391-9d93-4e66-b3f4-ac81fd3adbe9",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/VisualizationEntitys/?limit={{limit}}&offset={{offset}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"VisualizationEntitys",
												""
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}",
													"description": "Number of results to return per page."
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"description": "The initial index from which to return the results."
												}
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/VisualizationEntitys/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"VisualizationEntitys",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Layer to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "542fd4fe-e926-4e9e-b151-9d6bbc852439",
												"exec": [
													"if (pm.environment.get(\"id\") === null) {",
													"    pm.environment.set(\"id\", 99999999);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1aa82894-bb6e-4bfb-b665-2f0cc26db3b5",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"if (pm.environment.get(\"id\") === 99999999) {",
													"    testName = pm.info.requestName + \" - Status code is 404\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(404);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"} else {",
													"    testName = pm.info.requestName + \" - Status code is 200\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(200);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"    ",
													"    ",
													"    var jsonData = pm.response.json();",
													"   ",
													"    testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"    pm.test(testName, function () {",
													"        pm.expect(jsonData).to.have.all.keys('id');",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/VisualizationEntitys/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"VisualizationEntitys",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this visualization entity."
												}
											]
										},
										"description": "API endpoint that allows Layer to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/VisualizationEntitys/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"VisualizationEntitys",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48741ae0-16a8-4048-9737-5e03e474d69c",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Visualization Entitys\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4ab14a5c-aaa4-4fda-b4b9-ab8f22ab0d2b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Visualizations",
							"item": [
								{
									"name": "API endpoint that allows Tag to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "846d92fd-85d9-400e-a057-980ab574b2de",
												"exec": [
													"pm.environment.set(\"id\", null);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "14d2fc92-0655-4985-9898-6b2fd4a96d37",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"var testName = pm.info.requestName + \" - Status code is 200\"",
													"pm.test(testName, function () {",
													"    pm.response.to.have.status(200);",
													"    pm.environment.set(\"TEST\", \"TRUE\");",
													"});",
													"evalTest(pm.environment.get(\"TEST\"), testName)",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"pm.test(testName, function () {",
													"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
													"     pm.environment.set(\"TEST\", \"TRUE\");",
													"    // Save result data to env vars",
													"    if (jsonData.results.size > 0) {",
													"        Object.keys(jsonData.results[1]).forEach(function(key) {",
													"            pm.environment.set(key, jsonData.results[0][key]);",
													"        });",
													"    } ",
													"});",
													"",
													"evalTest(pm.environment.get(\"TEST\"), testName)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Visualizations/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Visualizations",
												""
											]
										},
										"description": "API endpoint that allows Tag to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Visualizations/?limit=<integer>&offset=<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Visualizations",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>"
														},
														{
															"key": "offset",
															"value": "<integer>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "API endpoint that allows Tag to be viewed or listed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6a509151-94ef-4de9-be4a-060ad0fdcac7",
												"exec": [
													"if (pm.environment.get(\"id\") === null) {",
													"    pm.environment.set(\"id\", 99999999);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0009a33e-f222-4679-be36-b9fec85d55a1",
												"exec": [
													"function evalTest(result, testName) {",
													"    if ( result == \"TRUE\") {",
													"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
													"        pm.environment.set(\"passed\", thisPassed+1);",
													"    } else {",
													"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
													"        pm.environment.set(\"failed\", thisFailed+1);",
													"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
													"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
													"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
													"    }",
													"    pm.environment.set(\"TEST\", \"FALSE\");",
													"}",
													"",
													"pm.environment.set(\"TEST\", \"FALSE\");",
													"var requestName = pm.info.requestName;",
													"",
													"if (pm.environment.get(\"id\") === 99999999) {",
													"    testName = pm.info.requestName + \" - Status code is 404\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(404);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"} else {",
													"    testName = pm.info.requestName + \" - Status code is 200\"",
													"    pm.test(testName, function () {",
													"        pm.response.to.have.status(200);",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"    ",
													"    ",
													"    var jsonData = pm.response.json();",
													"   ",
													"    testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
													"    pm.test(testName, function () {",
													"        pm.expect(jsonData).to.have.all.keys('id');",
													"        pm.environment.set(\"TEST\", \"TRUE\");",
													"    });",
													"    ",
													"    evalTest(pm.environment.get(\"TEST\"), testName)",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/sandbox/api/Visualizations/:id/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sandbox",
												"api",
												"Visualizations",
												":id",
												""
											],
											"variable": [
												{
													"key": "id",
													"value": "{{id}}",
													"description": "A unique integer value identifying this visualization."
												}
											]
										},
										"description": "API endpoint that allows Tag to be viewed or listed."
									},
									"response": [
										{
											"name": "Untitled Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/sandbox/api/Visualizations/<integer>/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"sandbox",
														"api",
														"Visualizations",
														"<integer>",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fcb9f0fb-6f83-4b11-aa1d-12359ff0099a",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"folder\", \"Sandbox 2019 - Visualizations\")"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1fb4a569-dde7-4862-ad71-e4924658ab54",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Slack - Postman Test Reporter",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fba64934-cbd7-404e-896f-e154314d8b59",
						"exec": [
							"const moment = require('moment');",
							"var dateTime = moment().toISOString();",
							"pm.environment.set(\"pretext\",  \"*==================\"+dateTime+\"======================*\\n{{failed}} Tests have failed\\n\");",
							"var text = '';",
							"var attachments = [];",
							"var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
							"",
							"if (failedTests.length > 0) {",
							"  for (i = 0; i < failedTests.length; i++) {",
							"    text = failedTests[i][0] + \" - failed | Code: \"+failedTests[i][1]+\" | Reason: \"+failedTests[i][2]+\"\\n\";",
							"    ",
							"    if(i === 0) {",
							"        var attachment = {",
							"            \"pretext\": \"{{pretext}}\",",
							"            \"text\": text,",
							"            \"color\": \"#FF0000\",",
							"            \"mrkdwn_in\": [",
							"                \"text\",",
							"                \"pretext\"",
							"            ]",
							"        } ",
							"    } else {",
							"            var attachment = {",
							"            \"text\":text,",
							"            \"color\": \"#FF0000\",",
							"            \"mrkdwn_in\": [",
							"                \"text\",",
							"                \"pretext\"",
							"                ]",
							"            }",
							"        }",
							"        attachments.push(attachment);",
							"    }",
							"",
							"} else {",
							"    pm.environment.set(\"pretext\",  \"*==================\"+dateTime+\"======================*\");",
							"    var attachment = {",
							"            \"pretext\": \"{{pretext}}\",",
							"            \"text\":\"{{collection}} - Nothing Failed :tada:\",",
							"            \"color\": \"#00ff00\",",
							"            \"mrkdwn_in\": [",
							"                \"text\",",
							"                \"pretext\"",
							"                ]",
							"            }",
							"     attachments.push(attachment);",
							"}",
							"console.log(JSON.stringify(attachments))",
							"pm.environment.set(\"attachments\", JSON.stringify(attachments));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"attachments\": {{attachments}}\n}"
				},
				"url": {
					"raw": "{{slack-web-hook}}",
					"host": [
						"{{slack-web-hook}}"
					]
				},
				"description": "Reporting hook to slack, if test failed"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "acad80ae-8a53-42bc-a63b-80229286d1ca",
				"type": "text/javascript",
				"exec": [
					"pm.environment.set(\"collection\", \"Sandbox 2019\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fc3b2e02-90ac-4e70-9800-530941682c55",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f3116a21-dc83-4ff4-9391-c9438f450b23",
			"key": "baseUrl",
			"value": "http://service.civicpdx.org",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}