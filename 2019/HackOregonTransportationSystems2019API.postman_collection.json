{
	"info": {
		"_postman_id": "b5b4d9d9-5b71-4746-80c4-b73eb50eab03",
		"name": "Hack Oregon Transportation Systems 2019 API",
		"description": "Hack Oregon Transportation Systems 2019 API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "setup",
			"item": [
				{
					"name": "Setup",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5075f62b-ca1a-484a-9f3e-b1673128e029",
								"exec": [
									"pm.environment.set(\"passed\", 0);",
									"pm.environment.set(\"failed\", 0);",
									"",
									"pm.environment.set(\"limit\", 2);",
									"pm.environment.set(\"offset\", 1);",
									"",
									"",
									"pm.environment.set(\"failedTests\", JSON.stringify([]));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "foo1",
									"value": "bar1"
								},
								{
									"key": "foo2",
									"value": "bar2"
								}
							]
						},
						"description": "A setup step"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "transportation2019",
			"item": [
				{
					"name": "v1",
					"item": [
						{
							"name": "toad",
							"item": [
								{
									"name": "bus Am Rush Summary",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Bus AM rush hour summary statistics.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c6235e09-eb0c-4e72-8a85-161716fafec5",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "258bc3de-83b7-4cb3-8a66-88d071f034f8",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busAmRushSummary/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busAmRushSummary",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus routes to include. Example: '10,14' for routes 10 and 14.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Bus AM rush hour summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busAmRushSummary/?limit=<integer>&offset=<integer>&bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busAmRushSummary",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Bus AM rush hour summary statistics.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e167f90c-03c3-46d7-bb6e-92337a01848c",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busAmRushSummary/:id/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busAmRushSummary",
														":id",
														""
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Bus AM rush hour summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busAmRushSummary/<string>/?bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busAmRushSummary",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "48eb15ac-1fc0-4ec3-a1c3-10cb93216a83",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - bus Am Rush Summary\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "419e26eb-7ef9-4bad-97cc-2ac6d19d06d1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "bus By Stop Summary",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Bus By Stop summary statistics.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "49ba6aeb-6559-4971-b3c9-36fa3d3ac072",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "07c63262-a59e-4ab8-8a06-5e59c0253ee2",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    Object.keys(jsonData.results[0]).forEach(function(key) {",
															"        pm.environment.set(key, jsonData.results[0][key]);",
															"    });",
															"",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busByStopSummary/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busByStopSummary",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus routes to include. Example: '10,14' for routes 10 and 14.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Bus By Stop summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busByStopSummary/?limit=<integer>&offset=<integer>&bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busByStopSummary",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Bus By Stop summary statistics.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0804b3b6-ddf2-4289-a5dd-06e86511e8b1",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.all.keys('id', 'location_id', 'stop_name','route_number','direction', 'longitude','latitude','geom_point_4326','arrive_quarter_hour','samples','p05_seconds_late','q1_seconds_late','median_seconds_late','q3_seconds_late','p95_seconds_late','iqr_seconds_late','total_ons','total_offs');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busByStopSummary/:id/?",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busByStopSummary",
														":id",
														""
													],
													"query": [
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus routes to include. Example: '10,14' for routes 10 and 14.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Bus By Stop summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busByStopSummary/<string>/?bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busByStopSummary",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e0c22567-535e-410a-934b-dc9b75fbf839",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - bus By Stop Summary\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e24116f8-4c5e-4765-8da8-536d1840c59f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "bus Passenger Stops",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points from scheduled stop events along TriMet bus routes.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "675af7cc-8eae-443c-b764-621eff26c0f0",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "941801c3-e1f1-45de-9977-246c30c1cd49",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busPassengerStops/?years=2017&months=10",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busPassengerStops",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results.",
															"disabled": true
														},
														{
															"key": "years",
															"value": "2017",
															"description": "Years to filter on. Example: '2017' or '2017,2018'."
														},
														{
															"key": "months",
															"value": "10",
															"description": "Months to filter on (integer). Example: '9,10' to include September and October."
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus route numbers to include, separated by a comma.\n\nExample:\t10,14\n\nReturns data for only routes 10 and 14.",
															"disabled": true
														},
														{
															"key": "stops",
															"value": "<string>",
															"description": "Stop ids to include, separated by a comma.\n\nExample:\tstopid1,stopid2,stopid3\n\nReturns data for only these stops.",
															"disabled": true
														},
														{
															"key": "time_range",
															"value": "<string>",
															"description": "Decimal time range to filter on (24 hour). Formatted as 'START,STOP', where START and STOP are numbers. Both START and STOP are required. The decimal format is converted to correct time format.\n\nExample:\t6.25,9.5\n\nReturns data filtered from 6:15 am to 9:30 am.",
															"disabled": true
														},
														{
															"key": "service_key",
															"value": "<string>",
															"description": "Service Key\n\nW - Weekdays\nS - Saturday\nU - Sunday\nX - Holiday",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points from scheduled stop events along TriMet bus routes."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busPassengerStops/?limit=<integer>&offset=<integer>&years=<string>&months=<string>&lines=<string>&stops=<string>&time_range=<string>&service_key=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busPassengerStops",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "years",
																	"value": "<string>"
																},
																{
																	"key": "months",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "stops",
																	"value": "<string>"
																},
																{
																	"key": "time_range",
																	"value": "<string>"
																},
																{
																	"key": "service_key",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points from scheduled stop events along TriMet bus routes.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c6b4287-f49b-4a04-9071-3511f68c4d5c",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busPassengerStops/:id/?years=2017&months=10",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busPassengerStops",
														":id",
														""
													],
													"query": [
														{
															"key": "years",
															"value": "2017",
															"description": "Years to filter on. Example: '2017' or '2017,2018'."
														},
														{
															"key": "months",
															"value": "10",
															"description": "Months to filter on (integer). Example: '9,10' to include September and October."
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus route numbers to include, separated by a comma.\n\nExample:\t10,14\n\nReturns data for only routes 10 and 14.",
															"disabled": true
														},
														{
															"key": "stops",
															"value": "<string>",
															"description": "Stop ids to include, separated by a comma.\n\nExample:\tstopid1,stopid2,stopid3\n\nReturns data for only these stops.",
															"disabled": true
														},
														{
															"key": "time_range",
															"value": "<string>",
															"description": "Decimal time range to filter on (24 hour). Formatted as 'START,STOP', where START and STOP are numbers. Both START and STOP are required. The decimal format is converted to correct time format.\n\nExample:\t6.25,9.5\n\nReturns data filtered from 6:15 am to 9:30 am.",
															"disabled": true
														},
														{
															"key": "service_key",
															"value": "<string>",
															"description": "Service Key\n\nW - Weekdays\nS - Saturday\nU - Sunday\nX - Holiday",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON points from scheduled stop events along TriMet bus routes."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busPassengerStops/<string>/?years=<string>&months=<string>&lines=<string>&stops=<string>&time_range=<string>&service_key=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busPassengerStops",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "years",
																	"value": "<string>"
																},
																{
																	"key": "months",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "stops",
																	"value": "<string>"
																},
																{
																	"key": "time_range",
																	"value": "<string>"
																},
																{
																	"key": "service_key",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bea2ac0c-67f1-445a-a73b-56b742c92ece",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - bus Passenger Stops\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38cc3f5a-c2fe-42e2-9b66-e1edb96eadbb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "bus Passenger Stops Catalog",
									"item": [
										{
											"name": "This endpoint returns a listing of the available year / month / route combinations",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b57a2049-2398-4665-a477-5e8ba712f3e0",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3867c899-a0ed-4e6c-acea-79b948ae13eb",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    Object.keys(jsonData.results[0]).forEach(function(key) {",
															"        pm.environment.set(key, jsonData.results[0][key]);",
															"    });",
															"",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busPassengerStopsCatalog/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busPassengerStopsCatalog",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns a listing of the available year / month / route combinations\nwith the number of rows in the table for Bus Passenger Stops"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busPassengerStopsCatalog/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busPassengerStopsCatalog",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns a listing of the available year / month / route combinations",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e2cc9261-f9c6-420e-b8d5-fac9d262499d",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.all.keys('id','year','month','route_number','rows');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busPassengerStopsCatalog/:id/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busPassengerStopsCatalog",
														":id",
														""
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": "A unique integer value identifying this bus passenger stops catalog."
														}
													]
												},
												"description": "This endpoint returns a listing of the available year / month / route combinations\nwith the number of rows in the table for Bus Passenger Stops"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busPassengerStopsCatalog/<integer>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busPassengerStopsCatalog",
																"<integer>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8d088c78-bc2a-436f-8850-2cb669731d47",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - bus Passenger Stops Catalog\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ea176cb9-3004-41bb-861f-dee7bd717dd6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "bus Pm Rush Summary",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Bus PM rush hour summary statistics.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "95a96aac-cc52-4cb5-8a01-f96c67c74366",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0ab9322f-17f5-416f-80df-886a8f991355",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busPmRushSummary/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busPmRushSummary",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus routes to include. Example: '10,14' for routes 10 and 14.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Bus PM rush hour summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busPmRushSummary/?limit=<integer>&offset=<integer>&bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busPmRushSummary",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Bus PM rush hour summary statistics.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "66c7ab7a-b3d0-4914-97c6-1f55c3ce1116",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busPmRushSummary/:id/?",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busPmRushSummary",
														":id",
														""
													],
													"query": [
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus routes to include. Example: '10,14' for routes 10 and 14.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Bus PM rush hour summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busPmRushSummary/<string>/?bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busPmRushSummary",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "802a89a1-0526-445c-b3a1-aa31a699fb7b",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - bus Pm Rush Summary\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cfbc3e71-bb5f-4570-81a6-f2a1c7e0c6c5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "bus Stop Catchment Zone With Census Attribs",
									"item": [
										{
											"name": "This endpoint returns GeoJSON shape of Bus Stop Catchment Zones.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "32f002e3-72aa-4391-8a1d-988c1c9a3496",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0088ed31-df23-44c5-ab6a-de1ef6c1caba",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busStopCatchmentZoneWithCensusAttribs/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busStopCatchmentZoneWithCensusAttribs",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus/Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														},
														{
															"key": "stops",
															"value": "<string>",
															"description": "Stop ids to include, separated by a comma.\n\nExample:\tstopid1,stopid2,stopid3\n\nReturns data for only these stops.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON shape of Bus Stop Catchment Zones."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busStopCatchmentZoneWithCensusAttribs/?limit=<integer>&offset=<integer>&lines=<string>&directions=<string>&stops=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busStopCatchmentZoneWithCensusAttribs",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																},
																{
																	"key": "stops",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON shape of Bus Stop Catchment Zones.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "53ba7dc7-fd8e-49e4-ba55-81c4e4d0b00d",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busStopCatchmentZoneWithCensusAttribs/:id/?",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busStopCatchmentZoneWithCensusAttribs",
														":id",
														""
													],
													"query": [
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus/Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														},
														{
															"key": "stops",
															"value": "<string>",
															"description": "Stop ids to include, separated by a comma.\n\nExample:\tstopid1,stopid2,stopid3\n\nReturns data for only these stops.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON shape of Bus Stop Catchment Zones."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busStopCatchmentZoneWithCensusAttribs/<string>/?lines=<string>&directions=<string>&stops=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busStopCatchmentZoneWithCensusAttribs",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																},
																{
																	"key": "stops",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e5a25972-ebd9-4811-87ed-f06a1a091f46",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - bus Stop Catchment Zone With Census Attribs\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ed51602a-af06-40cb-b5da-adb309abad4e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "bus System Wide Summary",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Bus System Wide summary statistics.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cb51540a-c3bf-4d4c-957d-636517c9b884",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    Object.keys(jsonData.results[0]).forEach(function(key) {",
															"        pm.environment.set(key, jsonData.results[0][key]);",
															"    });",
															"",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fcc18ccf-61db-465d-b31d-ca056c20295b",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busSystemWideSummary/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busSystemWideSummary",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Bus System Wide summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busSystemWideSummary/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busSystemWideSummary",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Bus System Wide summary statistics.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d9c80635-bb06-4521-89ac-7cc8380e7fa0",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.all.keys('arrive_quarter_hour','samples','p05_seconds_late','q1_seconds_late','median_seconds_late','q3_seconds_late','p95_seconds_late','iqr_seconds_late','total_ons','total_offs');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/busSystemWideSummary/:arrive_quarter_hour/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"busSystemWideSummary",
														":arrive_quarter_hour",
														""
													],
													"variable": [
														{
															"key": "arrive_quarter_hour",
															"value": "1",
															"description": "A unique value identifying this bus system wide summary."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Bus System Wide summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/busSystemWideSummary/<string>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"busSystemWideSummary",
																"<string>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "db6c83d2-3a44-431e-af95-9c4feaa8cd06",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - bus System Wide Summary\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b0f662da-f3d4-4c49-85d2-f7215cba564c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "disturbance Stops",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points from disturbance stop events along TriMet bus routes.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "71829ace-9510-4280-9945-e38441f76c57",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5f3fb90f-0eac-4c69-8eee-2c3ed563f7c2",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceStops/?limit={{limit}}&offset={{offset}}&months=10&years=2017",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"disturbanceStops",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "months",
															"value": "10",
															"description": "Months to filter on (integer). Only September (9), October (10) and November (11) are available. Example: '9,10' to include September and October."
														},
														{
															"key": "time_range",
															"value": "<string>",
															"description": "Quarter hour time range to filter on. Example: '6.25,9.5' would filter from 6:15 am to 9:30 am",
															"disabled": true
														},
														{
															"key": "years",
															"value": "2017",
															"description": "Years to filter on. Only 2017 and 2018 are available. Example: '2017' or '2017,2018'."
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction. 'I' for Inbound, 'O' for Outbound. Example: 'I,O'.",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus routes to include. Example: '10,14' for routes 10 and 14.",
															"disabled": true
														},
														{
															"key": "service_key",
															"value": "<string>",
															"description": "Service Key ('W' - Weekday, 'S' - Saturday, 'U' - Sunday, 'X' - Holiday).",
															"disabled": true
														},
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points from disturbance stop events along TriMet bus routes.\n\nDisturbance stops are when a bus stops for longer than 5 seconds outside of a scheduled stop catchment area."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceStops/?limit=<integer>&offset=<integer>&months=<string>&time_range=<string>&years=<string>&directions=<string>&lines=<string>&service_key=<string>&bounds=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"disturbanceStops",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "months",
																	"value": "<string>"
																},
																{
																	"key": "time_range",
																	"value": "<string>"
																},
																{
																	"key": "years",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "service_key",
																	"value": "<string>"
																},
																{
																	"key": "bounds",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points from disturbance stop events along TriMet bus routes.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "464ef15b-510b-462c-a288-8db24525c27f",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceStops/:id/?months=10&years=2017",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"disturbanceStops",
														":id",
														""
													],
													"query": [
														{
															"key": "months",
															"value": "10",
															"description": "Months to filter on (integer). Only September (9), October (10) and November (11) are available. Example: '9,10' to include September and October."
														},
														{
															"key": "time_range",
															"value": "<string>",
															"description": "Quarter hour time range to filter on. Example: '6.25,9.5' would filter from 6:15 am to 9:30 am",
															"disabled": true
														},
														{
															"key": "years",
															"value": "2017",
															"description": "Years to filter on. Only 2017 and 2018 are available. Example: '2017' or '2017,2018'."
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction. 'I' for Inbound, 'O' for Outbound. Example: 'I,O'.",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus routes to include. Example: '10,14' for routes 10 and 14.",
															"disabled": true
														},
														{
															"key": "service_key",
															"value": "<string>",
															"description": "Service Key ('W' - Weekday, 'S' - Saturday, 'U' - Sunday, 'X' - Holiday).",
															"disabled": true
														},
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON points from disturbance stop events along TriMet bus routes.\n\nDisturbance stops are when a bus stops for longer than 5 seconds outside of a scheduled stop catchment area."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceStops/<string>/?months=<string>&time_range=<string>&years=<string>&directions=<string>&lines=<string>&service_key=<string>&bounds=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"disturbanceStops",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "months",
																	"value": "<string>"
																},
																{
																	"key": "time_range",
																	"value": "<string>"
																},
																{
																	"key": "years",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "service_key",
																	"value": "<string>"
																},
																{
																	"key": "bounds",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0fd04161-a938-43c2-8b67-e855ffd5be50",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - disturbance Stops\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8bb15608-bfa2-4d21-a216-0335f342a723",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "disturbance Stops Catalog",
									"item": [
										{
											"name": "This endpoint returns a listing of the available year / month / route combinations",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0fb573ca-6c99-4663-8bd6-af29f8364c1b",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e015318a-0979-43ea-bc91-e558edd2681e",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    Object.keys(jsonData.results[0]).forEach(function(key) {",
															"        pm.environment.set(key, jsonData.results[0][key]);",
															"    });",
															"",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceStopsCatalog/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"disturbanceStopsCatalog",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns a listing of the available year / month / route combinations\nwith the number of rows in the table for Disturbance Stops"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceStopsCatalog/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"disturbanceStopsCatalog",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns a listing of the available year / month / route combinations",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a22a9e9f-4b93-495b-bfbe-2826b99cbdaa",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.all.keys('id','year','month','line_id','rows');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceStopsCatalog/:id/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"disturbanceStopsCatalog",
														":id",
														""
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": "A unique integer value identifying this disturbance stops catalog."
														}
													]
												},
												"description": "This endpoint returns a listing of the available year / month / route combinations\nwith the number of rows in the table for Disturbance Stops"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceStopsCatalog/<integer>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"disturbanceStopsCatalog",
																"<integer>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fc92a886-9243-4ad6-89d7-5077eb054192",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - disturbance Stops Catalog\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a4a08972-d445-4d1a-84e2-3891515619a0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "disturbance System Wide Summary",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Disturbance System Wide summary statistics.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "989cdcf3-0222-49a1-a72d-0e7d1ece370f",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    Object.keys(jsonData.results[0]).forEach(function(key) {",
															"        pm.environment.set(key, jsonData.results[0][key]);",
															"    });",
															"",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceSystemWideSummary/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"disturbanceSystemWideSummary",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Disturbance System Wide summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceSystemWideSummary/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"disturbanceSystemWideSummary",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Disturbance System Wide summary statistics.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1e769aad-83e1-4ef3-b2dd-8afae162436e",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.all.keys('start_quarter_hour','samples','p05_duration','q1_duration','median_duration','q3_duration','p95_duration','iqr_duration');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceSystemWideSummary/:start_quarter_hour/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"disturbanceSystemWideSummary",
														":start_quarter_hour",
														""
													],
													"variable": [
														{
															"key": "start_quarter_hour",
															"value": "1",
															"description": "A unique value identifying this disturbance system wide summary."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Disturbance System Wide summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/disturbanceSystemWideSummary/<string>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"disturbanceSystemWideSummary",
																"<string>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2d8abea5-47a2-4bd3-8ba5-dcffeba5d1d0",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - disturbance System Wide Summary\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4619aed0-e746-4064-a6e8-b7dc8259a5fd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ncdb Sample Transportation Commutes",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Passenger Stop Locations.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7714030a-0eb3-48d9-bdc4-027d6c0703fe",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f834af6c-0c75-4447-b8ea-b0df35fae1b1",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/ncdbSampleTransportationCommutes/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"ncdbSampleTransportationCommutes",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "opp_zone",
															"value": "<string>",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Passenger Stop Locations."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/ncdbSampleTransportationCommutes/?limit=<integer>&offset=<integer>&opp_zone=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"ncdbSampleTransportationCommutes",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "opp_zone",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Passenger Stop Locations.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "44ff3396-7387-4445-a4de-006f3e72f9e2",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/ncdbSampleTransportationCommutes/:tract_geo_fips/?opp_zone=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"ncdbSampleTransportationCommutes",
														":tract_geo_fips",
														""
													],
													"query": [
														{
															"key": "opp_zone",
															"value": "<string>"
														}
													],
													"variable": [
														{
															"key": "tract_geo_fips",
															"value": "{{id}}",
															"description": "A unique value identifying this ncdb sample transportation commute."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Passenger Stop Locations."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/ncdbSampleTransportationCommutes/<string>/?opp_zone=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"ncdbSampleTransportationCommutes",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "opp_zone",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6cc754f4-ac1b-407c-9ec0-8096f2b1a4fa",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - ncdb Sample Transportation Commutes\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a959b6b3-f5bb-4350-901d-4d0838df658b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "passenger Stop Locations",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Passenger Stop Locations.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dd4bd110-bbe7-4f17-ad00-ffb04529c44e",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    Object.keys(jsonData.results[0]).forEach(function(key) {",
															"        pm.environment.set(key, jsonData.results[0][key]);",
															"    });",
															"",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/passengerStopLocations/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"passengerStopLocations",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Passenger Stop Locations."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/passengerStopLocations/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"passengerStopLocations",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Passenger Stop Locations.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e7f48a08-6930-4eb3-b776-fbd883dbaa73",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.all.keys('stop_id','longitude','latitude','geom_point_4326');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/passengerStopLocations/:stop_id/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"passengerStopLocations",
														":stop_id",
														""
													],
													"variable": [
														{
															"key": "stop_id",
															"value": "{{stop_id}}",
															"description": "A unique value identifying this passenger stop locations."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Passenger Stop Locations."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/passengerStopLocations/<string>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"passengerStopLocations",
																"<string>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "69e48e76-0a23-44f4-952a-28014cb09ee9",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - passenger Stop Locations\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c4ffbce6-bf39-4560-922e-035a54b19256",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "rail Am Rush Summary",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Rail AM rush hour summary statistics.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "11272e46-6b2a-4f3a-b16d-0a7e800f5b3e",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ff35a69a-2a04-4320-b90b-bfc68ec88899",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railAmRushSummary/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railAmRushSummary",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Rail AM rush hour summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railAmRushSummary/?limit=<integer>&offset=<integer>&bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railAmRushSummary",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Rail AM rush hour summary statistics.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e99dfd3-dcf6-4376-aa34-05dfac702c6d",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railAmRushSummary/:id/?",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railAmRushSummary",
														":id",
														""
													],
													"query": [
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Rail AM rush hour summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railAmRushSummary/<string>/?bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railAmRushSummary",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a8014d44-2624-4e25-bd28-8860f309301f",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - rail Am Rush Summary\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ff015a6e-114f-4089-bfae-cc5973ec8b01",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "rail By Stop Summary",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Rail By Stop summary statistics.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4edabc46-e1bd-4d03-8474-2e353d06d25d",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b821ebc2-378c-4b78-bb16-8112a0d74138",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    Object.keys(jsonData.results[0]).forEach(function(key) {",
															"        pm.environment.set(key, jsonData.results[0][key]);",
															"    });",
															"",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railByStopSummary/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railByStopSummary",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Rail By Stop summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railByStopSummary/?limit=<integer>&offset=<integer>&bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railByStopSummary",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Rail By Stop summary statistics.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8626c86f-e1c5-4dda-bfd7-4f93041cdcdf",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.all.keys('id', 'location_id', 'stop_name','route_number','direction', 'longitude','latitude','geom_point_4326','arrive_quarter_hour','samples','p05_seconds_late','q1_seconds_late','median_seconds_late','q3_seconds_late','p95_seconds_late','iqr_seconds_late','total_ons','total_offs');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railByStopSummary/:id/?",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railByStopSummary",
														":id",
														""
													],
													"query": [
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Rail By Stop summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railByStopSummary/<string>/?bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railByStopSummary",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cc735679-51b9-45ef-a9c6-91a15e68da3d",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - rail By Stop Summary\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ce754d9f-0286-4189-9da2-b1c464e225d2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "rail Passenger Stops",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points from scheduled stop events along TriMet rail routes.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cb40618a-82a1-4b5d-8bcc-cf974371e355",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9bbb0c2a-4643-4812-8a87-c2954d916a01",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railPassengerStops/?years=2017&months=10",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railPassengerStops",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "<integer>",
															"description": "Number of results to return per page.",
															"disabled": true
														},
														{
															"key": "offset",
															"value": "<integer>",
															"description": "The initial index from which to return the results.",
															"disabled": true
														},
														{
															"key": "years",
															"value": "2017",
															"description": "Years to filter on. Example: '2017' or '2017,2018'."
														},
														{
															"key": "months",
															"value": "10",
															"description": "Months to filter on (integer). Example: '9,10' to include September and October."
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "stops",
															"value": "<string>",
															"description": "Stop ids to include. Example:",
															"disabled": true
														},
														{
															"key": "time_range",
															"value": "<string>",
															"description": "Quarter hour time range to filter on. Example: '6.25,9.5' would filter from 6:15 am to 9:30 am",
															"disabled": true
														},
														{
															"key": "service_key",
															"value": "<string>",
															"description": "Service Key ('A' - Weekday MAX, 'B' - Saturday MAX, 'C' - Sunday MAX).",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction. '1' for Inbound (or often Southboound), '0' for Outbound (or often Northbound). Example: '1,0'.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points from scheduled stop events along TriMet rail routes."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railPassengerStops/?limit=<integer>&offset=<integer>&years=<string>&months=<string>&lines=<string>&stops=<string>&time_range=<string>&service_key=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railPassengerStops",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "years",
																	"value": "<string>"
																},
																{
																	"key": "months",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "stops",
																	"value": "<string>"
																},
																{
																	"key": "time_range",
																	"value": "<string>"
																},
																{
																	"key": "service_key",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points from scheduled stop events along TriMet rail routes.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4610d1da-8aa2-4983-85f6-79782ed67ec3",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railPassengerStops/:id/?years=2017&months=10",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railPassengerStops",
														":id",
														""
													],
													"query": [
														{
															"key": "years",
															"value": "2017",
															"description": "Years to filter on. Example: '2017' or '2017,2018'."
														},
														{
															"key": "months",
															"value": "10",
															"description": "Months to filter on (integer). Example: '9,10' to include September and October."
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "stops",
															"value": "<string>",
															"description": "Stop ids to include. Example:",
															"disabled": true
														},
														{
															"key": "time_range",
															"value": "<string>",
															"description": "Quarter hour time range to filter on. Example: '6.25,9.5' would filter from 6:15 am to 9:30 am",
															"disabled": true
														},
														{
															"key": "service_key",
															"value": "<string>",
															"description": "Service Key ('A' - Weekday MAX, 'B' - Saturday MAX, 'C' - Sunday MAX).",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction. '1' for Inbound (or often Southboound), '0' for Outbound (or often Northbound). Example: '1,0'.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON points from scheduled stop events along TriMet rail routes."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railPassengerStops/<string>/?years=<string>&months=<string>&lines=<string>&stops=<string>&time_range=<string>&service_key=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railPassengerStops",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "years",
																	"value": "<string>"
																},
																{
																	"key": "months",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "stops",
																	"value": "<string>"
																},
																{
																	"key": "time_range",
																	"value": "<string>"
																},
																{
																	"key": "service_key",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "82aaf4fd-55c4-436a-92b7-9ab104c1c78a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - rail Passenger Stops\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e049c64d-4b92-4120-95cd-7b4b3f0c0f6a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "rail Passenger Stops Catalog",
									"item": [
										{
											"name": "This endpoint returns a listing of the available year / month / route combinations",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "636c941e-d33c-43fd-bdee-392c2df7616d",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "47f0bea5-d213-42cc-a359-2a573d1cfc26",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    Object.keys(jsonData.results[0]).forEach(function(key) {",
															"        pm.environment.set(key, jsonData.results[0][key]);",
															"    });",
															"",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railPassengerStopsCatalog/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railPassengerStopsCatalog",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns a listing of the available year / month / route combinations\nwith the number of rows in the table for Rail Passenger Stops"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railPassengerStopsCatalog/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railPassengerStopsCatalog",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns a listing of the available year / month / route combinations",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6bf7723b-01b8-49d8-ae34-2830aeb5f62e",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData).to.have.all.keys('id','year','month','route_number','rows');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railPassengerStopsCatalog/:id/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railPassengerStopsCatalog",
														":id",
														""
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": "A unique integer value identifying this rail passenger stops catalog."
														}
													]
												},
												"description": "This endpoint returns a listing of the available year / month / route combinations\nwith the number of rows in the table for Rail Passenger Stops"
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railPassengerStopsCatalog/<integer>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railPassengerStopsCatalog",
																"<integer>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6a07c5ae-a19f-43ed-bf11-a1dbc68c9aea",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - rail Passenger Stops Catalog\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "855f6faf-6ff1-4ec3-81bb-561a4c38d3e8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "rail Pm Rush Summary",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Rail PM rush hour summary statistics.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e1c5ba4b-ca98-4b14-a9cb-f617d4175f36",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5227e805-b4a0-49e3-a841-692af957eb4e",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railPmRushSummary/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railPmRushSummary",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Rail PM rush hour summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railPmRushSummary/?limit=<integer>&offset=<integer>&bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railPmRushSummary",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Rail PM rush hour summary statistics.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ce28c802-8d97-431b-a8bb-9c869653aefd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d8bd61a7-a761-4963-9816-f547e8e193f8",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railPmRushSummary/:id/?",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railPmRushSummary",
														":id",
														""
													],
													"query": [
														{
															"key": "bounds",
															"value": "<string>",
															"description": "Four coordinate points forming the south-west and north-east corners of a bounding box (min long, min lat, max long, max lat). Example: -122.665849,45.510867,-122.653650,45.514367",
															"disabled": true
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN, `290` - ORANGE. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Rail PM rush hour summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railPmRushSummary/<string>/?bounds=<string>&lines=<string>&directions=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railPmRushSummary",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "bounds",
																	"value": "<string>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ba106064-8e5e-41ad-87e1-4ab653dc6ad7",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - rail Pm Rush Summary\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dee47bc6-93d7-48c2-a92a-79a2bdac6624",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "rail System Wide Summary",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of Rail System Wide summary statistics.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2cff6dcf-56f7-43ed-8ea4-12bd665fdc74",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1e5344d4-4f2f-4ecf-bbd0-117d71ed4327",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    Object.keys(jsonData.results[0]).forEach(function(key) {",
															"        pm.environment.set(key, jsonData.results[0][key]);",
															"    });",
															"",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railSystemWideSummary/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railSystemWideSummary",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Rail System Wide summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railSystemWideSummary/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railSystemWideSummary",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of Rail System Wide summary statistics.",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/railSystemWideSummary/:arrive_quarter_hour/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"railSystemWideSummary",
														":arrive_quarter_hour",
														""
													],
													"variable": [
														{
															"key": "arrive_quarter_hour",
															"value": "<string>",
															"description": "A unique value identifying this rail system wide summary."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of Rail System Wide summary statistics."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/railSystemWideSummary/<string>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"railSystemWideSummary",
																"<string>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b131c9ca-6abb-42b8-8b38-8eeeb1ffd721",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - rail System Wide Summary\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "416906dd-4b58-4f4e-9038-07ce8c360706",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ridership Demographics",
									"item": [
										{
											"name": "This endpoint returns GeoJSON polygons of Bus Stop Catchment Zones with ridership",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9664d79b-57a4-4de4-b8f1-00b7aa5c7441",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b6e56e68-5865-4789-884b-6e920fa5944f",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/ridershipDemographics/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"ridershipDemographics",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														},
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus/Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														},
														{
															"key": "stops",
															"value": "<string>",
															"description": "Stop ids to include, separated by a comma.\n\nExample:\tstopid1,stopid2,stopid3\n\nReturns data for only these stops.",
															"disabled": true
														}
													]
												},
												"description": "This endpoint returns GeoJSON polygons of Bus Stop Catchment Zones with ridership\nand demographic information."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/ridershipDemographics/?limit=<integer>&offset=<integer>&lines=<string>&directions=<string>&stops=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"ridershipDemographics",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																},
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																},
																{
																	"key": "stops",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON polygons of Bus Stop Catchment Zones with ridership",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "789ddff5-8dee-475a-b7c1-97c96fa1033e",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/ridershipDemographics/:id/?",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"ridershipDemographics",
														":id",
														""
													],
													"query": [
														{
															"key": "lines",
															"value": "<string>",
															"description": "Bus/Rail routes to include. `90` - RED, `100` - BLUE, `190` - YELLOW, `200` - GREEN. Example: '90,100' for the RED and BLUE lines.",
															"disabled": true
														},
														{
															"key": "directions",
															"value": "<string>",
															"description": "Line direction\n\n1 for Inbound (or often Southbound)\n0 for Outbound (or often Northbound)\n\nExample:\t1,0\n\nReturns data from both directions of a route.",
															"disabled": true
														},
														{
															"key": "stops",
															"value": "<string>",
															"description": "Stop ids to include, separated by a comma.\n\nExample:\tstopid1,stopid2,stopid3\n\nReturns data for only these stops.",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{id}}",
															"description": {
																"content": "",
																"type": "text/plain"
															}
														}
													]
												},
												"description": "This endpoint returns GeoJSON polygons of Bus Stop Catchment Zones with ridership\nand demographic information."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/ridershipDemographics/<string>/?lines=<string>&directions=<string>&stops=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"ridershipDemographics",
																"<string>",
																""
															],
															"query": [
																{
																	"key": "lines",
																	"value": "<string>"
																},
																{
																	"key": "directions",
																	"value": "<string>"
																},
																{
																	"key": "stops",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a123b167-8691-4f86-b9b0-f2c63af96698",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - ridership Demographics\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8894031b-b8e6-442a-b33d-ff79f26611ab",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "tm Rail Stops",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of TriMet rail stop locations in the Trimet service area.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e43d1192-99d7-4e11-8ac1-aa0968564d6b",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fd2d92e0-88fc-4135-aa13-06c939e2bfed",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/tmRailStops/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"tmRailStops",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of TriMet rail stop locations in the Trimet service area.\nThese locations are current as of early August 2019."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/tmRailStops/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"tmRailStops",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of TriMet rail stop locations in the Trimet service area.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2e7972c7-8ab0-4a15-8e47-5e37df9dd339",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/tmRailStops/:ogc_fid/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"tmRailStops",
														":ogc_fid",
														""
													],
													"variable": [
														{
															"key": "ogc_fid",
															"value": "{{id}}",
															"description": "A unique integer value identifying this tm rail stops."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of TriMet rail stop locations in the Trimet service area.\nThese locations are current as of early August 2019."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/tmRailStops/<integer>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"tmRailStops",
																"<integer>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "04f0dd38-fb03-4a4f-80b5-b9fa29dea87b",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - tm Rail Stops\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9af120fa-621a-42a8-9ddb-1daff75a9c47",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "tm Route Stops",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of TriMet bus stop locations in the Trimet service area.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8588ce71-0099-439f-a17b-d4c478eeb9fc",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d3ac3a93-5066-41ae-812e-4fe9f00180eb",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/tmRouteStops/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"tmRouteStops",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of TriMet bus stop locations in the Trimet service area.\nThese locations are current as of early August 2019."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/tmRouteStops/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"tmRouteStops",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of TriMet bus stop locations in the Trimet service area.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ba149c4b-2e71-4ceb-aebb-5dcc49508e32",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/tmRouteStops/:ogc_fid/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"tmRouteStops",
														":ogc_fid",
														""
													],
													"variable": [
														{
															"key": "ogc_fid",
															"value": "{{id}}",
															"description": "A unique integer value identifying this tm route stops."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of TriMet bus stop locations in the Trimet service area.\nThese locations are current as of early August 2019."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/tmRouteStops/<integer>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"tmRouteStops",
																"<integer>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dc225a7f-08be-4097-adfc-8aaf28f3fa8a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - tm Route Stops\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4fd42c9d-03e0-4df2-b053-c5783f8c0e07",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "traffic Signals",
									"item": [
										{
											"name": "This endpoint returns GeoJSON points of traffic signal locations in the Portland area.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c32d166f-039e-4adb-90d5-b65c8a1347f9",
														"exec": [
															"pm.environment.set(\"id\", null);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b22bbaa3-098e-4e3f-a3f7-15d4a70690fa",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"testName = pm.info.requestName + \" - Check if object contains all provided keys\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys('count', 'next', 'previous','results');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"    // Save result data to env vars",
															"    if (jsonData.results.size > 0) {",
															"        Object.keys(jsonData.results[0]).forEach(function(key) {",
															"            pm.environment.set(key, jsonData.results[0][key]);",
															"        });",
															"    } ",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData.results).to.have.all.keys('type', 'features');",
															"    pm.expect(jsonData.results.type).to.equal(\"FeatureCollection\");",
															"    pm.expect(jsonData.results.features).to.be.an('array');",
															"    pm.expect(jsonData.results.features[0]).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"    pm.environment.set(\"id\", jsonData.results.features[0][\"id\"]);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/trafficSignals/?limit={{limit}}&offset={{offset}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"trafficSignals",
														""
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}",
															"description": "Number of results to return per page."
														},
														{
															"key": "offset",
															"value": "{{offset}}",
															"description": "The initial index from which to return the results."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of traffic signal locations in the Portland area."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/trafficSignals/?limit=<integer>&offset=<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"trafficSignals",
																""
															],
															"query": [
																{
																	"key": "limit",
																	"value": "<integer>"
																},
																{
																	"key": "offset",
																	"value": "<integer>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "This endpoint returns GeoJSON points of traffic signal locations in the Portland area.",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "89e2c530-e166-49ab-bfec-58971feaefeb",
														"exec": [
															"function evalTest(result, testName) {",
															"    if ( result == \"TRUE\") {",
															"        thisPassed = parseInt(pm.environment.get(\"passed\"));",
															"        pm.environment.set(\"passed\", thisPassed+1);",
															"    } else {",
															"        thisFailed = parseInt(pm.environment.get(\"failed\"));",
															"        pm.environment.set(\"failed\", thisFailed+1);",
															"        var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
															"        failedTests.push([pm.environment.get(\"folder\")+\" - \"+testName, pm.response.code, pm.response.status]);",
															"        pm.environment.set(\"failedTests\", JSON.stringify(failedTests));",
															"    }",
															"    pm.environment.set(\"TEST\", \"FALSE\");",
															"}",
															"",
															"pm.environment.set(\"TEST\", \"FALSE\");",
															"var requestName = pm.info.requestName;",
															"",
															"var testName = pm.info.requestName + \" - Status code is 200\"",
															"pm.test(testName, function () {",
															"    pm.response.to.have.status(200);",
															"    pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)",
															"",
															"var jsonData = pm.response.json();",
															"",
															"var testName = pm.info.requestName + \" - Results is Feature Collection\"",
															"pm.test(testName, function () {",
															"    pm.expect(jsonData).to.have.all.keys(\"id\",\"type\",'geometry','properties');",
															"     pm.environment.set(\"TEST\", \"TRUE\");",
															"});",
															"evalTest(pm.environment.get(\"TEST\"), testName)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/transportation2019/v1/toad/trafficSignals/:ogc_fid/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transportation2019",
														"v1",
														"toad",
														"trafficSignals",
														":ogc_fid",
														""
													],
													"variable": [
														{
															"key": "ogc_fid",
															"value": "{{id}}",
															"description": "A unique integer value identifying this traffic signals."
														}
													]
												},
												"description": "This endpoint returns GeoJSON points of traffic signal locations in the Portland area."
											},
											"response": [
												{
													"name": "Untitled Response",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/transportation2019/v1/toad/trafficSignals/<integer>/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"transportation2019",
																"v1",
																"toad",
																"trafficSignals",
																"<integer>",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f932a077-accb-4ca0-bc3f-db2660159148",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"folder\", \"Transportation 2019 - traffic Signals\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6ec379cd-55bb-498b-8304-be3f5a3a8723",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Slack - Postman Test Reporter Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fba64934-cbd7-404e-896f-e154314d8b59",
						"exec": [
							"const moment = require('moment');",
							"var dateTime = moment().toISOString();",
							"pm.environment.set(\"pretext\",  \"*==================\"+dateTime+\"======================*\\n{{failed}} Tests have failed\\n\");",
							"var text = '';",
							"var attachments = [];",
							"var failedTests = JSON.parse(pm.environment.get(\"failedTests\"));",
							"",
							"if (failedTests.length > 0) {",
							"  for (i = 0; i < failedTests.length; i++) {",
							"    text = failedTests[i][0] + \" - failed | Code: \"+failedTests[i][1]+\" | Reason: \"+failedTests[i][2]+\"\\n\";",
							"    ",
							"    if(i === 0) {",
							"        var attachment = {",
							"            \"pretext\": \"{{pretext}}\",",
							"            \"text\": text,",
							"            \"color\": \"#FF0000\",",
							"            \"mrkdwn_in\": [",
							"                \"text\",",
							"                \"pretext\"",
							"            ]",
							"        } ",
							"    } else {",
							"            var attachment = {",
							"            \"text\":text,",
							"            \"color\": \"#FF0000\",",
							"            \"mrkdwn_in\": [",
							"                \"text\",",
							"                \"pretext\"",
							"                ]",
							"            }",
							"        }",
							"        attachments.push(attachment);",
							"    }",
							"",
							"} else {",
							"    pm.environment.set(\"pretext\",  \"*==================\"+dateTime+\"======================*\");",
							"    var attachment = {",
							"            \"pretext\": \"{{pretext}}\",",
							"            \"text\":\"{{collection}} - Nothing Failed :tada:\",",
							"            \"color\": \"#00ff00\",",
							"            \"mrkdwn_in\": [",
							"                \"text\",",
							"                \"pretext\"",
							"                ]",
							"            }",
							"     attachments.push(attachment);",
							"}",
							"console.log(JSON.stringify(attachments))",
							"pm.environment.set(\"attachments\", JSON.stringify(attachments));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"attachments\": {{attachments}}\n}"
				},
				"url": {
					"raw": "{{slack-web-hook}}",
					"host": [
						"{{slack-web-hook}}"
					]
				},
				"description": "Reporting hook to slack, if test failed"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b9ef5bc3-8414-4b44-822a-dd1d768d0d9b",
				"type": "text/javascript",
				"exec": [
					"pm.environment.set(\"collection\", \"Transportation Systems 2019 API\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "64ada681-2795-4447-bd54-2d3daa4dea4c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "3b148264-b88b-41b8-ab63-098881fee4fe",
			"key": "baseUrl",
			"value": "http://service.civicpdx.org",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}